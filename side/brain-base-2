import numpy as np
import matplotlib.pyplot as plt
import time
from matplotlib import style
from matplotlib.colors import ListedColormap
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import make_moons
from sklearn.neighbors import KNeighborsClassifier

style.use('ggplot')

# step size in the mesh
h = 0.02

# create classifier
k = 3
clf = KNeighborsClassifier(k)

# dataset
X, y = make_moons(n_samples=100, noise=0.5, random_state=2)

x_min, x_max = X[:, 0].min() - 0.2, X[:, 0].max() + 0.2
y_min, y_max = X[:, 1].min() - 0.2, X[:, 1].max() + 0.2
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))

# plot setup
plt.figure(figsize=(6,6))
cm_list = ["#FFAAAA", "#FFCCCC", "#CCFFCC", "#AAFFAA"]
cm = ListedColormap(cm_list)
cm_bold = ListedColormap(["#FF0000", "#00FF00"])
ax = plt.subplot(1, 1, 1)

# fit the classifier and time training time
start_time = time.time()
clf.fit(X, y)
end_time = time.time() - start_time

# get predictions
Z = clf.predict_proba(np.c_[xx.ravel(), yy.ravel()])[:, 1]

# plot Z
Z = Z.reshape(xx.shape)
ax.contourf(xx, yy, Z, cmap=cm, alpha=1)

# plot X
ax.scatter(X[:, 0], X[:, 1], c=y, cmap=cm_bold, marker="x")

ax.set_xlim(xx.min(), xx.max())
ax.set_ylim(yy.min(), yy.max())
ax.set_xticks(())
ax.set_yticks(())
print('Training Time: {}s'.format(round(end_time,5)))

plt.show()